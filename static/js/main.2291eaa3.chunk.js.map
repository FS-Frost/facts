{"version":3,"sources":["FactsClient.ts","Facts.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["URL_RANDOM_FACT","URL_TODAY_FACT","async","getFact","url","apiResponse","fetch","body","text","clientResponse","status","json","ok","JSON","parse","console","error","Facts","isLoading","setIsLoading","useState","shouldShowJson","setShouldShowJson","fact","setFact","language","setLanguage","rawResponse","setRawResponse","factUrl","setFactUrl","showLoading","msg","hideLoading","useCallback","response","concat","getRandomFact","handleResponse","f","stringify","time","Date","toLocaleTimeString","permalink","useEffect","getTodayFact","onMount","_jsxs","className","children","_jsx","value","readOnly","onClick","disabled","htmlFor","name","onChange","e","target","type","checked","href","rel","App","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"8NAUA,MAAMA,EAAkB,2CAClBC,EAAiB,0CAEvBC,eAAeC,EAAQC,GACnB,MAAMC,QAAoBC,MAAMF,GAC1BG,QAAaF,EAAYG,OAE/B,IAAIC,EAAqC,CACrCC,OAAQL,EAAYK,OACpBC,KAAM,MAGV,OAAKN,EAAYO,IAKjBH,EAAeE,KAAOE,KAAKC,MAAMP,GAC1BE,IALHM,QAAQC,MAAMT,GACPE,G,WC4GAQ,MA/Hf,WACI,MAAOC,EAAWC,GAAgBC,oBAAkB,IAC7CC,EAAgBC,GAAqBF,oBAAkB,IACvDG,EAAMC,GAAWJ,mBAAiB,KAClCK,EAAUC,GAAeN,mBAAiB,OAC1CO,EAAaC,GAAkBR,mBAAiB,KAChDS,EAASC,GAAcV,mBAAiB,gCAEzCW,EAAcA,KAChBZ,GAAa,GACb,MAAMa,EAAM,aACZR,EAAQQ,GACRJ,EAAeI,IAGbC,EAAcA,KAChBd,GAAa,IAGXhB,EAAU+B,uBAAY,KACdhC,WACN6B,IACA,MAAMI,QD3BXjC,eAA6BuB,GAEhC,OAAOtB,EADE,GAAAiC,OAAMpC,EAAe,cAAAoC,OAAaX,IC0BZY,CAAcZ,GACrCa,EAAeH,GACfF,KAGJM,KACD,CAACd,IAEEa,EAAkBH,IACpB,GAAgB,MAAZA,EAAJ,CAMA,GAFAP,EAAef,KAAK2B,UAAUL,EAAU,KAAM,IAEtB,MAApBA,EAASzB,OAAgB,CACzB,MAAM+B,GAAO,IAAIC,MAAOC,qBAGxB,OAFAnB,EAAQ,IAADY,OAAKK,EAAI,iDAChBX,EAAW,IAIf,GAAqB,MAAjBK,EAASxB,KAGT,OAFAa,EAAQ,wBACRM,EAAW,IAIfN,EAAQW,EAASxB,KAAKH,MACtBsB,EAAWK,EAASxB,KAAKiC,aAsB7B,OAfAC,qBAAU,KACU3C,WACZ6B,IACA,MAAMI,QD7DXjC,eAA4BuB,GAE/B,OAAOtB,EADE,GAAAiC,OAAMnC,EAAc,cAAAmC,OAAaX,IC4DXqB,CAAa,MACpCR,EAAeH,GACfF,KAGJc,KACD,IAEHF,qBAAU,KACN1C,MACD,CAACA,IAGA6C,eAAA,OAAKC,UAAU,QAAOC,SAAA,CAClBC,cAAA,OAAKF,UAAU,wBAAuBC,SAClCC,cAAA,YAAUF,UAAU,oBAAoBG,MAAO/B,EAAiBM,EAAcJ,EAAM8B,UAAQ,MAGhGF,cAAA,OAAKF,UAAU,kBAAiBC,SAC5BC,cAAA,UACIF,UAAU,wBACVK,QAASA,KACLnD,KAEJoD,SAAUrC,EAAUgC,SACvB,WAKLF,eAAA,OAAKC,UAAU,yBAAwBC,SAAA,CACnCF,eAAA,SAAOC,UAAU,mBAAmBO,QAAQ,YAAWN,SAAA,CAAC,YAC1C,OAEdF,eAAA,UACIS,KAAK,YACLR,UAAU,cACVS,SAAWC,IACPjC,EAAYiC,EAAEC,OAAOR,QACvBF,SAAA,CAEFC,cAAA,UAAQC,MAAM,KAAIF,SAAC,YACnBC,cAAA,UAAQC,MAAM,KAAIF,SAAC,iBAK3BF,eAAA,OAAKC,UAAU,oCAAmCC,SAAA,CAC9CC,cAAA,OAAKF,UAAU,0BAAyBC,SACpCC,cAAA,SAAOF,UAAU,mBAAmBY,KAAK,WAAWC,QAASzC,EAAgBqC,SAxDpEC,IACrBrC,EAAkBqC,EAAEC,OAAOE,cAyDnBX,cAAA,SAAOF,UAAU,mBAAkBC,SAAC,kBAGxCC,cAAA,OAAKF,UAAU,kBAAiBC,SAC5BF,eAAA,KAAGC,UAAU,QAAOC,SAAA,CAAC,YACP,IACVC,cAAA,KAAGY,KAAMlC,EAAS+B,OAAO,SAASI,IAAI,aAAYd,SAC7CrB,aC9GVoC,MAVf,WACI,OACIjB,eAAA,OAAKC,UAAU,MAAKC,SAAA,CAChBC,cAAA,MAAIF,UAAU,mBAAkBC,SAAC,iBAEjCC,cAAClC,EAAK,QCKHiD,MAZUC,IACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,OCHdS,IAASC,OACP1B,cAAC2B,IAAMC,WAAU,CAAA7B,SACfC,cAACc,EAAG,MAENe,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.2291eaa3.chunk.js","sourcesContent":["export async function getRandomFact(language: string): Promise<FactClientResponse> {\n    const url = `${URL_RANDOM_FACT}?language=${language}`;\n    return getFact(url);\n}\n\nexport async function getTodayFact(language: string): Promise<FactClientResponse> {\n    const url = `${URL_TODAY_FACT}?language=${language}`;\n    return getFact(url);\n}\n\nconst URL_RANDOM_FACT = \"https://uselessfacts.jsph.pl/random.json\";\nconst URL_TODAY_FACT = \"https://uselessfacts.jsph.pl/today.json\";\n\nasync function getFact(url: string): Promise<FactClientResponse> {\n    const apiResponse = await fetch(url);\n    const body = await apiResponse.text();\n\n    let clientResponse: FactClientResponse = {\n        status: apiResponse.status,\n        json: null,\n    };\n\n    if (!apiResponse.ok) {\n        console.error(body);\n        return clientResponse;\n    }\n\n    clientResponse.json = JSON.parse(body) as FactResponse;\n    return clientResponse;\n}\n\ninterface FactResponse {\n    id: string;\n    text: string;\n    source: string;\n    source_url: string;\n    language: string;\n    permalink: string;\n}\n\nexport interface FactClientResponse {\n    status: number;\n    json: FactResponse | null;\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"./Facts.css\";\nimport { FactClientResponse, getRandomFact, getTodayFact } from \"./FactsClient\";\n\nfunction Facts() {\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [shouldShowJson, setShouldShowJson] = useState<boolean>(false);\n    const [fact, setFact] = useState<string>(\"\");\n    const [language, setLanguage] = useState<string>(\"en\");\n    const [rawResponse, setRawResponse] = useState<string>(\"\");\n    const [factUrl, setFactUrl] = useState<string>(\"https://uselessfacts.jsph.pl\");\n\n    const showLoading = () => {\n        setIsLoading(true);\n        const msg = \"Loading...\";\n        setFact(msg);\n        setRawResponse(msg);\n    };\n\n    const hideLoading = () => {\n        setIsLoading(false);\n    };\n\n    const getFact = useCallback(() => {\n        const f = async () => {\n            showLoading();\n            const response = await getRandomFact(language);\n            handleResponse(response);\n            hideLoading();\n        };\n\n        f();\n    }, [language]);\n\n    const handleResponse = (response: FactClientResponse | undefined) => {\n        if (response == null) {\n            return;\n        }\n\n        setRawResponse(JSON.stringify(response, null, 2));\n\n        if (response.status === 429) {\n            const time = new Date().toLocaleTimeString();\n            setFact(`(${time}) Too many attempts! Try again later :)`);\n            setFactUrl(\"\");\n            return;\n        }\n\n        if (response.json == null) {\n            setFact(\"Ups, try again.\");\n            setFactUrl(\"\");\n            return;\n        }\n\n        setFact(response.json.text);\n        setFactUrl(response.json.permalink);\n    };\n\n    const toggleDebugMode = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setShouldShowJson(e.target.checked);\n    };\n\n    useEffect(() => {\n        const onMount = async () => {\n            showLoading();\n            const response = await getTodayFact(\"en\");\n            handleResponse(response);\n            hideLoading();\n        };\n\n        onMount();\n    }, []);\n\n    useEffect(() => {\n        getFact();\n    }, [getFact]);\n\n    return (\n        <div className=\"Facts\">\n            <div className=\"col mb-3 facts-search\">\n                <textarea className=\"form-control fact\" value={shouldShowJson ? rawResponse : fact} readOnly />\n            </div>\n\n            <div className=\"col mb-3 search\">\n                <button\n                    className=\"btn btn-primary w-100\"\n                    onClick={() => {\n                        getFact();\n                    }}\n                    disabled={isLoading}\n                >\n                    Next\n                </button>\n            </div>\n\n            <div className=\"input-group mb-3 w-100\">\n                <label className=\"input-group-text\" htmlFor=\"languages\">\n                    Language:{\" \"}\n                </label>\n                <select\n                    name=\"languages\"\n                    className=\"form-select\"\n                    onChange={(e) => {\n                        setLanguage(e.target.value);\n                    }}\n                >\n                    <option value=\"en\">English</option>\n                    <option value=\"de\">German</option>\n                    {/* <option value=\"random\">Surprise me</option> */}\n                </select>\n            </div>\n\n            <div className=\"input-group-text mb-3 facts-debug\">\n                <div className=\"input-group me-1 w-auto\">\n                    <input className=\"form-check-input\" type=\"checkbox\" checked={shouldShowJson} onChange={toggleDebugMode} />\n                </div>\n                <label className=\"form-check-label\">Debug mode</label>\n            </div>\n\n            <div className=\"col facts-links\">\n                <p className=\"w-100\">\n                    Fact URL:{\" \"}\n                    <a href={factUrl} target=\"_blank\" rel=\"noreferrer\">\n                        {factUrl}\n                    </a>\n                </p>\n            </div>\n        </div>\n    );\n}\n\nexport default Facts;\n","import React from \"react\";\nimport \"./App.css\";\nimport Facts from \"./Facts\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <h1 className=\"mb-3 text-center\">Random Facts</h1>\n\n            <Facts></Facts>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}