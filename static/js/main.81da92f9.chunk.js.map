{"version":3,"sources":["FactsClient.ts","Facts.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getRandomFact","language","a","url","URL_RANDOM_FACT","getFact","getTodayFact","URL_TODAY_FACT","fetch","apiResponse","text","body","clientResponse","status","json","ok","console","error","JSON","parse","Facts","useState","isLoading","setIsLoading","shouldShowJson","setShouldShowJson","fact","setFact","setLanguage","rawResponse","setRawResponse","factUrl","setFactUrl","showLoading","msg","hideLoading","useCallback","f","response","handleResponse","stringify","time","Date","toLocaleTimeString","permalink","useEffect","onMount","className","value","readOnly","onClick","disabled","htmlFor","name","onChange","e","target","type","checked","href","rel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81da92f9.chunk.js","sourcesContent":["export async function getRandomFact(language: string): Promise<FactClientResponse> {\n    const url = `${URL_RANDOM_FACT}?language=${language}`;\n    return getFact(url);\n}\n\nexport async function getTodayFact(language: string): Promise<FactClientResponse> {\n    const url = `${URL_TODAY_FACT}?language=${language}`;\n    return getFact(url);\n}\n\nconst URL_RANDOM_FACT = \"https://uselessfacts.jsph.pl/random.json\";\nconst URL_TODAY_FACT = \"https://uselessfacts.jsph.pl/today.json\";\n\nasync function getFact(url: string): Promise<FactClientResponse> {\n    const apiResponse = await fetch(url);\n    const body = await apiResponse.text();\n\n    let clientResponse: FactClientResponse = {\n        status: apiResponse.status,\n        json: null,\n    };\n\n    if (!apiResponse.ok) {\n        console.error(body);\n        return clientResponse;\n    }\n\n    clientResponse.json = JSON.parse(body) as FactResponse;\n    return clientResponse;\n}\n\ninterface FactResponse {\n    id: string;\n    text: string;\n    source: string;\n    source_url: string;\n    language: string;\n    permalink: string;\n}\n\nexport interface FactClientResponse {\n    status: number;\n    json: FactResponse | null;\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"./Facts.css\";\nimport { FactClientResponse, getRandomFact, getTodayFact } from \"./FactsClient\";\n\nfunction Facts() {\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [shouldShowJson, setShouldShowJson] = useState<boolean>(false);\n    const [fact, setFact] = useState<string>(\"\");\n    const [language, setLanguage] = useState<string>(\"en\");\n    const [rawResponse, setRawResponse] = useState<string>(\"\");\n    const [factUrl, setFactUrl] = useState<string>(\"https://uselessfacts.jsph.pl\");\n\n    const showLoading = () => {\n        setIsLoading(true);\n        const msg = \"Loading...\";\n        setFact(msg);\n        setRawResponse(msg);\n    };\n\n    const hideLoading = () => {\n        setIsLoading(false);\n    };\n\n    const getFact = useCallback(() => {\n        const f = async () => {\n            showLoading();\n            const response = await getRandomFact(language);\n            handleResponse(response);\n            hideLoading();\n        };\n\n        f();\n    }, [language]);\n\n    const handleResponse = (response: FactClientResponse | undefined) => {\n        if (response == null) {\n            return;\n        }\n\n        setRawResponse(JSON.stringify(response, null, 2));\n\n        if (response.status === 429) {\n            const time = new Date().toLocaleTimeString();\n            setFact(`(${time}) Too many attempts! Try again later :)`);\n            setFactUrl(\"\");\n            return;\n        }\n\n        if (response.json == null) {\n            setFact(\"Ups, try again.\");\n            setFactUrl(\"\");\n            return;\n        }\n\n        setFact(response.json.text);\n        setFactUrl(response.json.permalink);\n    };\n\n    const toggleDebugMode = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setShouldShowJson(e.target.checked);\n    };\n\n    useEffect(() => {\n        const onMount = async () => {\n            showLoading();\n            const response = await getTodayFact(\"en\");\n            handleResponse(response);\n            hideLoading();\n        };\n\n        onMount();\n    }, []);\n\n    useEffect(() => {\n        getFact();\n    }, [getFact]);\n\n    return (\n        <div className=\"Facts\">\n            <div className=\"col mb-3 facts-search\">\n                <textarea className=\"form-control fact\" value={shouldShowJson ? rawResponse : fact} readOnly />\n            </div>\n\n            <div className=\"col mb-3 search\">\n                <button\n                    className=\"btn btn-primary w-100\"\n                    onClick={() => {\n                        getFact();\n                    }}\n                    disabled={isLoading}\n                >\n                    Next\n                </button>\n            </div>\n\n            <div className=\"input-group mb-3 w-100\">\n                <label className=\"input-group-text\" htmlFor=\"languages\">\n                    Language:{\" \"}\n                </label>\n                <select\n                    name=\"languages\"\n                    className=\"form-select\"\n                    onChange={(e) => {\n                        setLanguage(e.target.value);\n                    }}\n                >\n                    <option value=\"en\">English</option>\n                    <option value=\"de\">German</option>\n                    {/* <option value=\"random\">Surprise me</option> */}\n                </select>\n            </div>\n\n            <div className=\"input-group-text mb-3 facts-debug\">\n                <div className=\"input-group me-1 w-auto\">\n                    <input className=\"form-check-input\" type=\"checkbox\" checked={shouldShowJson} onChange={toggleDebugMode} />\n                </div>\n                <label className=\"form-check-label\">Debug mode</label>\n            </div>\n\n            <div className=\"col facts-links\">\n                <p className=\"w-100\">\n                    Fact URL:{\" \"}\n                    <a href={factUrl} target=\"_blank\" rel=\"noreferrer\">\n                        {factUrl}\n                    </a>\n                </p>\n            </div>\n        </div>\n    );\n}\n\nexport default Facts;\n","import React from \"react\";\nimport \"./App.css\";\nimport Facts from \"./Facts\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <h1 className=\"mb-3 text-center\">Random Facts</h1>\n\n            <Facts></Facts>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}